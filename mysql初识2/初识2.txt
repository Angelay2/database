校对规则:
	1. 影响了用户对数据查询的排序
	2. 后缀为_cs: 大小写敏感的校对规则, 
	   后缀为_ci: 大小写不敏感的校对规则,
	   后缀为_bin: 二进制校对规则, 大小写敏感
	3. 校对规则的特征
		3.1 不同的字符集有不同的校对规则
		3.2 每一个字符集都有一个默认的校对规则
			eg: utf8 --> utf8_general_ci(大小写不敏感)

数据库备份:
	mysqldump -p[端口] -u [用户] -p [密码] -B [数据库的名称]
数据表备份:
	mysqldump -u [用户] -p[密码] 数据库名称 表名称1 表名称2 > [文件]

1. 创建表的时候, 设置列的名称以及列的属性
2. 插入数据的时候, 插入一行数据, 一行数据包含多个列的属性

	1. 创建数据库表
		create table[表名称](列的名称,列的类型, ...)  ---> 列也叫字段
	2. 查看表字段
		desc [表名称]
	| Field  |   Type   |    Null      |    Key    | Default | Extra |
	 字段名称  字段类型   是否可为NULL   是否是主键  默认值

3. 修改表字段
	3.1 新增
		alter table [table_name] add [字段的名称] [字段的类型] after [字段的名称]
	3.2 删除
		alter table [table_name] drop [字段的名称]
		注意: 对于删除而言, 如果删除了某一个列, 则该列的数据也就随之删除了
	3.3 修改
		alter table [table_name] modify [字段的名称] [修改后的字段的类型]
		alter table t2 modify id char(20);
	3.4 表的重命名
		after table [待命名的表名称] rename [to可要可不要] [重命名之后的名称]
	3.5 列的重命名
		after table [表名称] change [字段名] [修改后的名称] [字段属性]
		alter table t2 change assets phone char(11);

表的基本操作:(插入数据和查询数据)
	1. 增加数据
		1.1 全列增加(给每列下面都增加)
			insert into [table_name] values (表字段对应的值, ...)    --->有几列插入几列
			insert into t3 values(0, '张三', 123456, 0);

		1.2 指定列插入(后面还可插入多行)
			insert into[table_name](表中的列的名称, ...) values(指定表字段当中的内容, ...),(),();    
			insert into t3(name, sex) values ('lisi', 1);  没有指定的列就为NULL(没有数据, 但不是空)
		1.3 一次插入多行数据
			insert into[table_name] values (表字段对应的值, ...),(表字段对应的值, ...),...;
			insert into[table_name](表中的列的名称, ...) 表字段对应的值, ...) values(指定表字段当中的内容, ...),(指定表字段当中的内容, ...),(...), ...;  

2. 简单查询
	2.1 全列查询(展示所有列对应的内容)
		select * from [表名称];  
	2.2 指定列查询
		select [想要查询的列的名称1] ,[列名称2], ... from [表名称];
	2.3 表达式当中不包含列字段(结果显示临时增加的一列 值就是表达式)
		select [想要查询的列的名称1] ,[列名称2],[表达式],... from [表名称];
	2.4 表达式包含多个字段(先对第一行处理,再对第二行处理,最后整体以新增列的形式呈现)
		select [列名称1]+[列名称2]+[列名称3]... from [表名称];
	2.5 为查询结果定义别名(最后结果的那一列名称就是别名)
		select [列名称1]+[列名称2]+[列名称3] [别名] from [表名称];
	
数据类型
	1. tinyint类型,占用了1个字节 表示范围(-128～127)
		1.2 在my.cnf文件d [mysqld]下插入sql_mode=STRICT_ALL_TABLES会增强数据库对插入数据的类型范围的校验(如果插入的数据大于127, 则直接插入报错out of range..; 如果去掉, 则显示的是最大值127-->截断了)
		1.2 如果在涉及数据库表字段的时候, 设计到整数数据, 尽量不要用tinyint(根据实际情况), 而是用表示范围大的整型类型
		1.3 对于整型数据, 在涉及的时候, 尽量少用unsigned, 即tinyint unsigned(当求的两字段的差小于0时, 就坏了), 当一个小的数字减去一个大的数字有可能会导致查询结果出错, 因为无符号表示不了负数.
	2. BIT类型
		2.1 如果设置BIT类型, BIT类型的值是按照ASCII码来表示的
		2.2 如果只想存储0或者1, 则BIT类型的比特位数设置成为1;
	3. 小数类型(float(M,D) ---> 存储数据时是小数点后6位, 超过的话就是乱的数字, double(M,D) ---> 小数点后16位)   ---> M(表显式数据) 必须大于D(精度)
		3.1 如果想要追求高精度, 用decimal类型(也是小数点后16位)

























	
		
	
	
